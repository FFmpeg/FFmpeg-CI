name: CI Runner

on:
  workflow_dispatch:
    inputs:
      x86_64_count:
        description: 'Number of x86_64 runners'
        required: true
        type: number
        default: 0
      aarch64_count:
        description: 'Number of aarch64 runners'
        required: true
        type: number
        default: 0

defaults:
  run:
    shell: bash

jobs:
  matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.matrix.outputs.matrix }}
    steps:
      - id: matrix
        run: |
          X86=$(seq 1 "${{ github.event.inputs.x86_64_count }}" | jq -cs '[.[] | {"os":"ubuntu-latest", "runner_id":.}]')
          ARM=$(seq 1 "${{ github.event.inputs.aarch64_count }}" | jq -cs '[.[] | {"os":"ubuntu-24.04-arm", "runner_id":.}]')
          echo "matrix=$(jq -cn --argjson a "$X86" --argjson b "$ARM" '{include: ($a + $b)}')" >> $GITHUB_OUTPUT
  ci:
    needs: matrix
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.matrix.outputs.matrix) }}
    runs-on: ${{ matrix.os }}
    steps:
      - name: Free up disk space
        shell: bash -c "nohup bash -e {0} >/tmp/cleanup.log &"
        run: |
          df -h
          sudo rm -rf /opt/ghc /usr/local/.ghcup /usr/local/lib/android
          docker system prune -a -f
          df -h
      - name: Checkout
        uses: actions/checkout@v4
      - name: Get Runner Version
        id: runner_version
        run: |
          VER="$(curl -s https://code.forgejo.org/api/v1/repos/forgejo/runner/releases/latest | jq .name -r | cut -c 2-)"
          echo "version=$VER" >> $GITHUB_OUTPUT
      - name: Cache Runner
        id: cache_runner
        uses: actions/cache@v4
        with:
          key: fj-runner-${{ matrix.os }}-${{ steps.runner_version.outputs.version }}
          path: runner
      - name: Download Runner
        if: ${{ steps.cache_runner.outputs.cache-hit != 'true' }}
        run: |
          if [[ "$(uname -m)" == "aarch64" ]]; then
            RUNNERARCH="arm64"
          else
            RUNNERARCH="amd64"
          fi
          curl -Ls "https://code.forgejo.org/forgejo/runner/releases/download/v${{ steps.runner_version.outputs.version }}/forgejo-runner-${{ steps.runner_version.outputs.version }}-linux-${RUNNERARCH}.xz" | unxz > runner
          chmod +x runner
      - name: Register Runner
        run: |
          if [[ "$(uname -m)" == "aarch64" ]]; then
            printf '%s\n' '${{ secrets.RUNNER_REGISTRATION_AARCH64 }}' > .runner
            mv config_aarch64.yaml config.yaml
          else
            printf '%s\n' '${{ secrets.RUNNER_REGISTRATION_X86_64 }}' > .runner
            mv config_x86_64.yaml config.yaml
          fi
      - name: Restore Actions Cache
        id: act_cache
        uses: actions/cache/restore@v4
        with:
          key: act-cache-${{ matrix.os }}
          path: actcache
          restore-keys: |
            act-cache-${{ matrix.os }}-
      - name: Restore Docker Images
        id: docker_cache_restore
        uses: ./.github/actions/docker-cache-restore
        with:
          cache-key: docker-image-cache-${{ matrix.os }}
      - name: Get Internal Env-Vars
        uses: crazy-max/ghaction-github-runtime@v3
      - name: Start Cacheproxy
        run: |
          ./cacheproxy/genconfig.sh
          docker network create runnernet
          docker run --rm --pull=always -d --network runnernet --name cacheproxy -v ./cacheproxy:/etc/caddy caddy:2
          echo "ACTIONS_CACHE_URL_V2=http://cacheproxy:8080/" >> .env
          echo "ACTIONS_CACHE_SERVICE_V2=1" >> .env
      - name: Run Runner
        id: runner
        run: |
          RUNNER_RET=0
          while [[ "$RUNNER_RET" == "0" ]]; do
            ./runner one-job -c config.yaml |& tee runner.log && RUNNER_RET=$? || RUNNER_RET=$?
            if [[ "$RUNNER_RET" != "0" ]] && ! grep -q "Error: could not fetch task" runner.log; then
              exit "$RUNNER_RET"
            fi
          done
          exit 0
      - name: Cache Docker Images
        uses: ./.github/actions/docker-cache-save
        with:
          cache-key: docker-image-cache-${{ matrix.os }}
          matched-key: ${{ steps.docker_cache_restore.outputs.cache-matched-key }}
      - name: Calculate Cache Hash
        id: cache_hash
        run: |
          echo "hash=$(find actcache -type f -print0 | sort -z | xargs -0 sha1sum | sha1sum | cut -d' ' -f1)" >> $GITHUB_OUTPUT
      - name: Save Actions Cache
        uses: actions/cache/save@v4
        if: ${{ format('act-cache-{0}-{1}', matrix.os, steps.cache_hash.outputs.hash) != steps.act_cache.outputs.cache-matched-key }}
        with:
          key: act-cache-${{ matrix.os }}-${{ steps.cache_hash.outputs.hash }}
          path: actcache
      - name: Cleanup result
        run: cat /tmp/cleanup.log
      - name: Result output
        run: |
          cat ./cacheproxy/Caddyfile
          echo -------------------------
          docker logs cacheproxy
